# Example workflow showing how to use taskmaster-sync as a GitHub Action
# Copy this to your repository's .github/workflows/ directory

name: Sync Tasks with GitHub Projects

on:
  # Sync when PR is created or updated
  pull_request:
    types: [opened, synchronize, ready_for_review]

  # Sync after merge to main
  push:
    branches: [main]

  # Allow manual trigger
  workflow_dispatch:

jobs:
  sync-tasks:
    name: Sync TaskMaster to GitHub Project
    runs-on: ubuntu-latest
    
    # Required permissions for auto-committing config changes
    permissions:
      contents: write  # To commit and push config updates
      projects: write  # To create and update GitHub Projects

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # For PRs, checkout the PR branch
          ref: ${{ github.event.pull_request.head.ref || github.ref }}

      - name: Sync Tasks
        id: sync
        uses: 5dlabs/taskmaster-sync@v1  # Use specific version in production
        with:
          # Auto-detects tag from branch name if not specified
          # tag: ${{ github.event.pull_request.head.ref || 'main' }}

          # Project number (omit to auto-create, or specify existing)
          # project-number: 123

          # Auto-commit config changes (default: true)
          # auto-commit-config: 'true'

          # GitHub token (defaults to GITHUB_TOKEN)
          # github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = ${{ toJson(steps.sync.outputs) }};
            const body = `## üìã TaskMaster Sync Results

            - ‚úÖ Created: ${output.created || 0} items
            - üìù Updated: ${output.updated || 0} items
            - üóëÔ∏è Deleted: ${output.deleted || 0} items
            - ‚è≠Ô∏è Skipped: ${output.skipped || 0} items
            - ‚ùå Errors: ${output.errors || 0}

            Project: #${output['project-number-used'] || 'N/A'}
            
            View in [GitHub Project](https://github.com/orgs/${{ github.repository_owner }}/projects/${output['project-number-used']})`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });

