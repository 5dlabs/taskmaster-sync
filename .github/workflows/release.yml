name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          body: |
            # Taskmaster Sync ${{ steps.get_version.outputs.version }}

            Synchronize TaskMaster tasks with GitHub Projects v2.

            ## Installation

            ### As a GitHub Action
            ```yaml
            - uses: 5dlabs/taskmaster-sync@${{ steps.get_version.outputs.version }}
              with:
                project-number: 123  # Optional if in config
            ```

            ### Direct Binary Download
            Download the appropriate binary for your platform below.

            ## Changes
            See [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          draft: false
          prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    strategy:
      matrix:
        include:
          # Linux x64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: taskmaster-sync-linux-x64

          # macOS x64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: taskmaster-sync-darwin-x64

          # macOS ARM64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: taskmaster-sync-darwin-arm64

          # Windows x64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: taskmaster-sync-windows-x64.exe

    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build
        run: |
          cargo build --release --target ${{ matrix.target }}

      - name: Prepare binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{ matrix.target }}/release/task-master-sync.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/task-master-sync ${{ matrix.name }}
          fi

          # Make it executable on Unix
          if [ "${{ matrix.os }}" != "windows-latest" ]; then
            chmod +x ${{ matrix.name }}
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}
          asset_name: ${{ matrix.name }}
          asset_content_type: application/octet-stream

  update-major-version:
    name: Update Major Version Tag
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Update major version tag
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          MAJOR_VERSION=$(echo $VERSION | cut -d. -f1)

          git config user.name github-actions
          git config user.email github-actions@github.com

          # Delete the tag locally and remotely if it exists
          git tag -d $MAJOR_VERSION || true
          git push origin :refs/tags/$MAJOR_VERSION || true

          # Create and push the new tag
          git tag -a $MAJOR_VERSION -m "Update $MAJOR_VERSION tag to $VERSION"
          git push origin $MAJOR_VERSION

  publish-to-marketplace:
    name: Publish to GitHub Marketplace
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate action.yml
        run: |
          # Ensure action.yml exists and is valid
          if [ ! -f "action.yml" ]; then
            echo "Error: action.yml not found"
            exit 1
          fi

          echo "âœ… action.yml found and ready for marketplace"

      # Note: Actual marketplace publishing happens automatically
      # when you create a release if the repository has action.yml