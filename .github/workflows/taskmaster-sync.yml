name: Taskmaster Project Sync

on:
  # Sync when PR is created or updated
  pull_request:
    types: [opened, synchronize, ready_for_review]
    branches: [main]

  # Sync after merge to main
  push:
    branches: [main]

  # Manual trigger for debugging
  workflow_dispatch:
    inputs:
      sync_direction:
        description: 'Sync direction'
        required: true
        default: 'to-github'
        type: choice
        options:
          - to-github
          - from-github
          - bidirectional

env:
  RUST_BACKTRACE: 1
  PROJECT_NUMBER: ${{ vars.TASKMASTER_PROJECT_NUMBER }}

jobs:
  sync-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    name: Sync PR Tasks to GitHub Project

    # Prevent concurrent syncs for same PR
    concurrency:
      group: sync-pr-${{ github.event.pull_request.number }}
      cancel-in-progress: false

    steps:
      - name: Checkout PR Branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build taskmaster-sync
        run: cargo build --release

      - name: Configure Sync
        run: |
          # Create sync config for this PR
          cat > sync-config.json << EOF
          {
            "version": "1.0.0",
            "organization": "${{ github.repository_owner }}",
            "project_mappings": {
              "${{ github.event.pull_request.head.ref }}": {
                "project_number": ${{ env.PROJECT_NUMBER }},
                "project_id": "auto",
                "repository": "${{ github.repository }}",
                "subtask_mode": "nested",
                "field_mappings": {
                  "Status": {
                    "pending": "To Do",
                    "in-progress": "In Progress",
                    "done": "QA Review",
                    "qa-approved": "Done"
                  }
                }
              }
            }
          }
          EOF

      - name: Run Sync to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./target/release/taskmaster-sync sync \
            --config sync-config.json \
            --tag "${{ github.event.pull_request.head.ref }}" \
            --direction to-github \
            --delta \
            --force

      - name: Comment Sync Results
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            // Read sync results if available
            let comment = 'ðŸ”„ **Taskmaster Sync Results**\n\n';
            comment += `Branch: \`${{ github.event.pull_request.head.ref }}\`\n`;
            comment += `Project: #${{ env.PROJECT_NUMBER }}\n\n`;
            comment += 'âœ… Tasks synced to GitHub Project for QA review';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  sync-main:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Sync Main Branch Bidirectionally

    concurrency:
      group: sync-main
      cancel-in-progress: false

    steps:
      - name: Checkout Main
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build taskmaster-sync
        run: cargo build --release

      - name: Configure Sync
        run: |
          cat > sync-config.json << EOF
          {
            "version": "1.0.0",
            "organization": "${{ github.repository_owner }}",
            "project_mappings": {
              "main": {
                "project_number": ${{ env.PROJECT_NUMBER }},
                "project_id": "auto",
                "repository": "${{ github.repository }}",
                "subtask_mode": "nested",
                "field_mappings": {
                  "Status": {
                    "To Do": "pending",
                    "In Progress": "in-progress",
                    "QA Review": "done",
                    "Done": "qa-approved"
                  }
                }
              }
            }
          }
          EOF

      - name: Run Bidirectional Sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # First pull any PM updates from GitHub
          ./target/release/taskmaster-sync sync \
            --config sync-config.json \
            --tag main \
            --direction from-github \
            --delta

          # Then push any local changes back
          ./target/release/taskmaster-sync sync \
            --config sync-config.json \
            --tag main \
            --direction to-github \
            --delta

      - name: Commit Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .taskmaster/
          git diff --staged --quiet || git commit -m "chore: sync task updates from GitHub Project [skip ci]"
          git push || echo "No changes to push"

  manual-sync:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    name: Manual Sync

    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
      - run: cargo build --release

      - name: Run Manual Sync
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./target/release/taskmaster-sync sync \
            --config .taskmaster/sync-config.json \
            --tag main \
            --direction ${{ inputs.sync_direction }} \
            --force