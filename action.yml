name: 'Taskmaster Sync'
description: 'Synchronize TaskMaster tasks with GitHub Projects v2 - maintain your project management in code'
author: '5dlabs'

inputs:
  config-path:
    description: 'Path to sync configuration file'
    required: false
    default: '.taskmaster/sync-config.json'

  tag:
    description: 'TaskMaster tag to sync (defaults to current branch name or master)'
    required: false
    default: ''

  project-number:
    description: 'GitHub Project number (auto-detected from config if not specified, use 0 to auto-create)'
    required: false
    default: ''

  github-token:
    description: 'GitHub token for authentication'
    required: false
    default: ${{ github.token }}

  version:
    description: 'Specific version of taskmaster-sync to use'
    required: false
    default: 'latest'

outputs:
  created:
    description: 'Number of items created'
    value: ${{ steps.sync.outputs.created }}

  updated:
    description: 'Number of items updated'
    value: ${{ steps.sync.outputs.updated }}

  deleted:
    description: 'Number of items deleted'
    value: ${{ steps.sync.outputs.deleted }}

  skipped:
    description: 'Number of items skipped'
    value: ${{ steps.sync.outputs.skipped }}

  errors:
    description: 'Number of errors encountered'
    value: ${{ steps.sync.outputs.errors }}
  
  project-number-used:
    description: 'The actual project number used (useful when auto-created)'
    value: ${{ steps.sync.outputs.project-number-used }}

runs:
  using: 'composite'
  steps:
    - name: Set up environment
      shell: bash
      run: |
        # Auto-detect tag from branch name if not provided
        if [ -z "${{ inputs.tag }}" ]; then
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "SYNC_TAG=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          else
            echo "SYNC_TAG=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_ENV
          fi
        else
          echo "SYNC_TAG=${{ inputs.tag }}" >> $GITHUB_ENV
        fi

    - name: Download taskmaster-sync
      shell: bash
      run: |
        # Determine version
        VERSION="${{ inputs.version }}"
        if [ "$VERSION" = "latest" ]; then
          echo "Fetching latest release version..."
          
          # Use GitHub token if available to avoid rate limits
          if [ -n "${{ inputs.github-token }}" ]; then
            VERSION=$(curl -s -H "Authorization: token ${{ inputs.github-token }}" https://api.github.com/repos/5dlabs/taskmaster-sync/releases/latest | jq -r .tag_name)
          else
            VERSION=$(curl -s https://api.github.com/repos/5dlabs/taskmaster-sync/releases/latest | jq -r .tag_name)
          fi
          
          # Check if VERSION is empty or null
          if [ -z "$VERSION" ] || [ "$VERSION" = "null" ]; then
            echo "Error: Failed to fetch latest version from GitHub API"
            echo "API Response:"
            curl -s https://api.github.com/repos/5dlabs/taskmaster-sync/releases/latest | head -20
            exit 1
          fi
        fi

        echo "Using taskmaster-sync version: $VERSION"

        # Determine platform
        case "${{ runner.os }}" in
          Linux)
            PLATFORM="linux-x64"
            ;;
          macOS)
            PLATFORM="darwin-x64"
            ;;
          Windows)
            PLATFORM="windows-x64"
            EXT=".exe"
            ;;
          *)
            echo "Unsupported platform: ${{ runner.os }}"
            exit 1
            ;;
        esac

        # Download binary
        BINARY_NAME="taskmaster-sync-${PLATFORM}${EXT}"
        DOWNLOAD_URL="https://github.com/5dlabs/taskmaster-sync/releases/download/${VERSION}/${BINARY_NAME}"

        echo "Downloading from: $DOWNLOAD_URL"
        
        # Download with error handling
        # Note: We download as the release asset name but execute as task-master-sync
        if ! curl -L -f -o taskmaster-sync${EXT} "$DOWNLOAD_URL"; then
          echo "Error: Failed to download binary from $DOWNLOAD_URL"
          echo "Please check that version $VERSION exists and has the $BINARY_NAME asset"
          exit 1
        fi
        
        # Rename to match the actual binary name
        mv taskmaster-sync${EXT} task-master-sync${EXT}
        chmod +x task-master-sync${EXT}

        # Verify download
        if ! ./task-master-sync${EXT} --version; then
          echo "Error: Downloaded binary failed to execute"
          echo "File details:"
          ls -la task-master-sync${EXT}
          file task-master-sync${EXT}
          exit 1
        fi

    - name: Run sync
      id: sync
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        # Build command with positional arguments
        if [ -n "${{ inputs.project-number }}" ]; then
          PROJECT_ARG="${{ inputs.project-number }}"
        else
          # Use 0 to trigger auto-creation when not specified
          echo "No project number specified, will auto-create new project..."
          PROJECT_ARG="0"
        fi

        CMD="./task-master-sync sync $SYNC_TAG $PROJECT_ARG --json"

        echo "Running: $CMD"

        # Run and capture output
        OUTPUT=$($CMD) || {
          echo "Sync failed with exit code $?"
          echo "Output: $OUTPUT"
          exit 1
        }

        # Parse JSON output for GitHub Actions outputs
        echo "created=$(echo "$OUTPUT" | jq -r '.stats.created // 0')" >> $GITHUB_OUTPUT
        echo "updated=$(echo "$OUTPUT" | jq -r '.stats.updated // 0')" >> $GITHUB_OUTPUT
        echo "deleted=$(echo "$OUTPUT" | jq -r '.stats.deleted // 0')" >> $GITHUB_OUTPUT
        echo "skipped=$(echo "$OUTPUT" | jq -r '.stats.skipped // 0')" >> $GITHUB_OUTPUT
        echo "errors=$(echo "$OUTPUT" | jq -r '.stats.errors | length // 0')" >> $GITHUB_OUTPUT
        echo "project-number-used=$(echo "$OUTPUT" | jq -r '.project_number // 0')" >> $GITHUB_OUTPUT

        # Print summary
        echo "## TaskMaster Sync Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Project:** #$(echo "$OUTPUT" | jq -r '.project_number // 0')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- Created: $(echo "$OUTPUT" | jq -r '.stats.created // 0')" >> $GITHUB_STEP_SUMMARY
        echo "- Updated: $(echo "$OUTPUT" | jq -r '.stats.updated // 0')" >> $GITHUB_STEP_SUMMARY
        echo "- Deleted: $(echo "$OUTPUT" | jq -r '.stats.deleted // 0')" >> $GITHUB_STEP_SUMMARY
        echo "- Skipped: $(echo "$OUTPUT" | jq -r '.stats.skipped // 0')" >> $GITHUB_STEP_SUMMARY
        echo "- Errors: $(echo "$OUTPUT" | jq -r '.stats.errors | length // 0')" >> $GITHUB_STEP_SUMMARY
        
        # Add note if project was auto-created
        if [ "$PROJECT_ARG" = "0" ] && [ "$(echo "$OUTPUT" | jq -r '.project_number // 0')" != "0" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ¨ **New project auto-created!** Project number: $(echo "$OUTPUT" | jq -r '.project_number')" >> $GITHUB_STEP_SUMMARY
        fi

branding:
  icon: 'refresh-cw'
  color: 'blue'